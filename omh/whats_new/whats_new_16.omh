$Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-16 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin whats_new_16$$
$spell
	alloc
	hpp
	valgrind
	uninitialized
	adouble
	CppAD
	Eigen
	std
	namespace
	cppad
	Hes
	Jac
$$

$section Changes and Additions to CppAD During 2016$$

$head Introduction$$
The sections listed below contain a list of the changes to CppAD
in reverse order by date.
The purpose of these sections is to
assist you in learning about changes between various versions of CppAD.

$head 03-01$$
$list number$$
Improve documentation of implementation requirements for the atomic
$cref/rev_sparse_jac/atomic_rev_sparse_jac/Implementation/$$.
$lnext
Make some corrections to the $cref atomic_for_sparse_hes$$ documentation.
and fix a bug in how CppAD used these functions.
$lend

$head 02-29$$
$list number$$
Merged sparse into master branch. This makes the
$cref ForSparseHes$$ routine available for use.
$lnext
Changed the
$cref/global options/speed_main/Global Options/$$
in the speed test main program to use one global variable with prototype
$srccode%cpp%
	extern std::map<std::string, bool> global_option;
%$$
$lend


$head 02-28$$
Fix a mistake in the atomic
$cref/rev_sparse_jac/atomic_sparsity.cpp/rev_sparse_jac/$$ example.
To be specific
$srccode%cpp%
	{	st[ 0 * p + j ] = rt[ 1 * m + j ];
		st[ 1 * p + j ] = rt[ 1 * m + j ];
		st[ 2 * p + j ] = rt[ 0 * m + j ];
	}
%$$
was changed to
$srccode%cpp%
	{	st[ 0 * p + j ] = rt[ 1 * p + j ];
		st[ 1 * p + j ] = rt[ 1 * p + j ];
		st[ 2 * p + j ] = rt[ 0 * p + j ];
	}
%$$


$head 02-27$$
The $code --with-sparse_set$$ and $code --with-sparse_set$$ options
were removed from the $cref auto_tools$$ install procedure.

$head 02-26$$
The condition that the operation sequence in $icode f$$ is
$cref/independent/glossary/Operation/Independent/$$ of
the independent variables was added to the statement about
the validity of the sparsity patterns; see $icode x$$ in
$cref/ForSparseJac/ForSparseJac/x/$$,
$cref/RevSparseJac/RevSparseJac/x/$$, and
$cref/RevSparseHes/RevSparseHes/x/$$.

$head 02-25$$
The $cref cmake$$ command line argument $code cppad_sparse_list$$
has been removed (because it is so much better than the other option).

$head 02-23$$
A new version of the
$code cppad_sparse_list$$ class (not part of user API) uses
reference counters to reduce the number of copies of sets that are equal.
This improved the speed of sparsity pattern computations that use
the $cref/vector of sets/glossary/Sparsity Pattern/Vector of Sets/$$
representation.
For example, the results for the
$cref cppad_sparse_hessian.cpp$$ test compare as follows:
$codep
	sparse_hessian_size     = [  100,    400,   900,  1600, 2500 ]
	sparse_hessian_rate_old = [ 1480, 265.21, 93.33, 41.93, 0.86 ]
	sparse_hessian_rate_new = [ 1328, 241.61, 92.99, 40.51, 3.80 ]
$$
Note that the improvement is only for large problems. In fact,
for large problems, preliminary testing indicates that
the new vector of sets representation preforms better than
the $cref/vector of boolean/glossary/Sparsity Pattern/Vector of Boolean/$$
representation.


$head 01-21$$
Fix a $code valgrind$$ warning about use of uninitialized memory
in the test $code test_more/checkpoint.cpp$$ (the problem was in the test).

$head 01-20$$
$list number$$
Fix a $code valgrind$$ warning about use of uninitialized memory
when using the $cref/adouble/base_adolc.hpp/$$ base type.
This required an optional $cref base_hash$$ function and the special
$cref/adouble hash_code/base_adolc.hpp/hash_code/$$ implementation.
$lnext
The $code adouble$$ $cref to_string$$ functions
required a special implementation; see
$cref/adouble to_string/base_adolc.hpp/to_string/$$.
$lnext
Add the $cref/to_string/base_alloc.hpp/to_string/$$ and
$cref/hash_code/base_alloc.hpp/hash_code/$$ examples
to the $code base_alloc.hpp$$ example.
$lend

$head 01-18$$
$list number$$
Fix ambiguity between $code CppAD::sin$$ and $code std::sin$$,
and other standard math functions,
when using
$codep
	using namespace std;
	using namespace CppAD;
$$
This is OK for simple programs, but not generally recommended.
See $code double$$ version of base class definitions for
$cref/Unary Standard Math/base_double.hpp/Unary Standard Math/$$
for more details.
$lnext
Change Eigen array example
$cref eigen_array.cpp$$
to use member function version of $code sin$$ function
(as per Eigen's array class documentation).
$lend

$end
